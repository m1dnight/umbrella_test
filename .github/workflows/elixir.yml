name: Compile, test, lint, and deploy

run-name: ${{ github.actor }} is testing out GitHub Actions ðŸš€

on: [push]

jobs:
  #-----------------------------------------------------------------------------
  # Compile the code base for the different mix environments
  # and cache the output of the _build and deps directories.
  compile:
    name: compile code
    strategy:
      matrix:
        mix_env: ["prod", "dev", "test"]
    runs-on: ubuntu-latest
    steps:
      # checkout the repo
      - name: Check out the repository to the runner
        uses: actions/checkout@v4

      # install os deps
      - uses: ./.github/workflows/os_dependencies

      # install erlang/elixir/protobuf
      - uses: ./.github/workflows/elxir_setup
      
      # setup build cache
      - uses: ./.github/workflows/cache
        with:
          os: ${{ runner.os }}
          mix_env: ${{ matrix.mix_env }}
          paths: |
            ${{ github.workspace }}/deps 
            ${{ github.workspace }}/_build

      # fetch deps and compile
      - run: MIX_ENV=${{matrix.mix_env}} mix deps.get --only ${{matrix.mix_env}}

      - run: MIX_ENV=${{matrix.mix_env}} mix compile --warnings-as-errors
  #-----------------------------------------------------------------------------
  # Run linting jobs on the code base.
  # This includes credo, formatting, and dialyzer.
  # Reuses the cache from above, and updates the cache when the job is done.
  lint:
    needs: [compile]
    name: lint codebase
    strategy:
      matrix:
        mix_env: ["dev"]
    runs-on: ubuntu-latest
    steps:
      # checkout the repo
      - name: Check out the repository to the runner
        uses: actions/checkout@v4

      # # install deps
      # - uses: ./.github/workflows/os_dependencies

      # setup build cache
      - uses: ./.github/workflows/cache
        with:
          os: ${{ runner.os }}
          mix_env: ${{ matrix.mix_env }}
          paths: |
            ${{ github.workspace }}/deps 
            ${{ github.workspace }}/_build

      # run mix credo
      - run: MIX_ENV=${{matrix.mix_env}} mix credo

      # check formatting
      - run: MIX_ENV=${{matrix.mix_env}} mix format --check-formatted

      # dialyzer
      - run: MIX_ENV=${{matrix.mix_env}} mix dialyzer
  #-----------------------------------------------------------------------------
  # Run the test suite against the code base.
  test:
    needs: [compile]
    name: run tests
    strategy:
      matrix:
        mix_env: ["test"]
    runs-on: ubuntu-latest
    steps:
      # checkout the repo
      - name: Check out the repository to the runner
        uses: actions/checkout@v4

      # install os deps
      - uses: ./.github/workflows/os_dependencies

      # install erlang/elixir/protobuf
      - uses: ./.github/workflows/elxir_setup

      # setup build cache
      - uses: ./.github/workflows/cache
        with:
          os: ${{ runner.os }}
          mix_env: ${{ matrix.mix_env }}
          paths: |
            ${{ github.workspace }}/deps 
            ${{ github.workspace }}/_builds

      # run mix test
      - run: MIX_ENV=${{matrix.mix_env}} mix test
  #-----------------------------------------------------------------------------
  # Generate the documentation of the code base.
  docs:
    needs: [compile]
    name: generate documentation
    strategy:
      matrix:
        mix_env: ["dev"]
    runs-on: ubuntu-latest
    steps:
      # checkout the repo
      - name: Check out the repository to the runner
        uses: actions/checkout@v4

      # install os deps
      - uses: ./.github/workflows/os_dependencies

      # install erlang/elixir/protobuf
      - uses: ./.github/workflows/elxir_setup

      # setup build cache
      - uses: ./.github/workflows/cache
        with:
          os: ${{ runner.os }}
          mix_env: ${{ matrix.mix_env }}
          paths: |
            ${{ github.workspace }}/deps 
            ${{ github.workspace }}/_builds

      # run mix docs
      - run: MIX_ENV=${{matrix.mix_env}} mix docs
